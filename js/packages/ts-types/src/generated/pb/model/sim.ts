// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v5.28.1
// source: pb/model/sim.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Character } from "./character";
import { Enemy } from "./enemy";

export interface SimConfig {
  settings?: SimulatorSettings | undefined;
  characters?:
    | Character[]
    | undefined;
  /** TODO: waves */
  enemies?: Enemy[] | undefined;
  engage?: Engage | undefined;
  gcsl?: string | undefined;
}

export interface SimulatorSettings {
  cycleLimit?: number | undefined;
  iterations?: number | undefined;
}

export interface Wave {
  enemies?: Enemy[] | undefined;
}

export interface Engage {
  ambush?: boolean | undefined;
}

function createBaseSimConfig(): SimConfig {
  return { settings: undefined, characters: [], enemies: [], engage: undefined, gcsl: undefined };
}

export const SimConfig: MessageFns<SimConfig> = {
  encode(message: SimConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.settings !== undefined) {
      SimulatorSettings.encode(message.settings, writer.uint32(10).fork()).join();
    }
    if (message.characters !== undefined && message.characters.length !== 0) {
      for (const v of message.characters) {
        Character.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    if (message.enemies !== undefined && message.enemies.length !== 0) {
      for (const v of message.enemies) {
        Enemy.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    if (message.engage !== undefined) {
      Engage.encode(message.engage, writer.uint32(50).fork()).join();
    }
    if (message.gcsl !== undefined) {
      writer.uint32(58).string(message.gcsl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.settings = SimulatorSettings.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const el = Character.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.characters!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const el = Enemy.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.enemies!.push(el);
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.engage = Engage.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.gcsl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimConfig {
    return {
      settings: isSet(object.settings) ? SimulatorSettings.fromJSON(object.settings) : undefined,
      characters: globalThis.Array.isArray(object?.characters)
        ? object.characters.map((e: any) => Character.fromJSON(e))
        : [],
      enemies: globalThis.Array.isArray(object?.enemies) ? object.enemies.map((e: any) => Enemy.fromJSON(e)) : [],
      engage: isSet(object.engage) ? Engage.fromJSON(object.engage) : undefined,
      gcsl: isSet(object.gcsl) ? globalThis.String(object.gcsl) : undefined,
    };
  },

  toJSON(message: SimConfig): unknown {
    const obj: any = {};
    if (message.settings !== undefined) {
      obj.settings = SimulatorSettings.toJSON(message.settings);
    }
    if (message.characters?.length) {
      obj.characters = message.characters.map((e) => Character.toJSON(e));
    }
    if (message.enemies?.length) {
      obj.enemies = message.enemies.map((e) => Enemy.toJSON(e));
    }
    if (message.engage !== undefined) {
      obj.engage = Engage.toJSON(message.engage);
    }
    if (message.gcsl !== undefined) {
      obj.gcsl = message.gcsl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SimConfig>, I>>(base?: I): SimConfig {
    return SimConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SimConfig>, I>>(object: I): SimConfig {
    const message = createBaseSimConfig();
    message.settings = (object.settings !== undefined && object.settings !== null)
      ? SimulatorSettings.fromPartial(object.settings)
      : undefined;
    message.characters = object.characters?.map((e) => Character.fromPartial(e)) || [];
    message.enemies = object.enemies?.map((e) => Enemy.fromPartial(e)) || [];
    message.engage = (object.engage !== undefined && object.engage !== null)
      ? Engage.fromPartial(object.engage)
      : undefined;
    message.gcsl = object.gcsl ?? undefined;
    return message;
  },
};

function createBaseSimulatorSettings(): SimulatorSettings {
  return { cycleLimit: 0, iterations: 0 };
}

export const SimulatorSettings: MessageFns<SimulatorSettings> = {
  encode(message: SimulatorSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cycleLimit !== undefined && message.cycleLimit !== 0) {
      writer.uint32(8).uint32(message.cycleLimit);
    }
    if (message.iterations !== undefined && message.iterations !== 0) {
      writer.uint32(16).uint32(message.iterations);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimulatorSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulatorSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.cycleLimit = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.iterations = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimulatorSettings {
    return {
      cycleLimit: isSet(object.cycleLimit) ? globalThis.Number(object.cycleLimit) : 0,
      iterations: isSet(object.iterations) ? globalThis.Number(object.iterations) : 0,
    };
  },

  toJSON(message: SimulatorSettings): unknown {
    const obj: any = {};
    if (message.cycleLimit !== undefined && message.cycleLimit !== 0) {
      obj.cycleLimit = Math.round(message.cycleLimit);
    }
    if (message.iterations !== undefined && message.iterations !== 0) {
      obj.iterations = Math.round(message.iterations);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SimulatorSettings>, I>>(base?: I): SimulatorSettings {
    return SimulatorSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SimulatorSettings>, I>>(object: I): SimulatorSettings {
    const message = createBaseSimulatorSettings();
    message.cycleLimit = object.cycleLimit ?? 0;
    message.iterations = object.iterations ?? 0;
    return message;
  },
};

function createBaseWave(): Wave {
  return { enemies: [] };
}

export const Wave: MessageFns<Wave> = {
  encode(message: Wave, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enemies !== undefined && message.enemies.length !== 0) {
      for (const v of message.enemies) {
        Enemy.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Wave {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWave();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const el = Enemy.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.enemies!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Wave {
    return {
      enemies: globalThis.Array.isArray(object?.enemies) ? object.enemies.map((e: any) => Enemy.fromJSON(e)) : [],
    };
  },

  toJSON(message: Wave): unknown {
    const obj: any = {};
    if (message.enemies?.length) {
      obj.enemies = message.enemies.map((e) => Enemy.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Wave>, I>>(base?: I): Wave {
    return Wave.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Wave>, I>>(object: I): Wave {
    const message = createBaseWave();
    message.enemies = object.enemies?.map((e) => Enemy.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEngage(): Engage {
  return { ambush: false };
}

export const Engage: MessageFns<Engage> = {
  encode(message: Engage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ambush !== undefined && message.ambush !== false) {
      writer.uint32(8).bool(message.ambush);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Engage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEngage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ambush = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Engage {
    return { ambush: isSet(object.ambush) ? globalThis.Boolean(object.ambush) : false };
  },

  toJSON(message: Engage): unknown {
    const obj: any = {};
    if (message.ambush !== undefined && message.ambush !== false) {
      obj.ambush = message.ambush;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Engage>, I>>(base?: I): Engage {
    return Engage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Engage>, I>>(object: I): Engage {
    const message = createBaseEngage();
    message.ambush = object.ambush ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
