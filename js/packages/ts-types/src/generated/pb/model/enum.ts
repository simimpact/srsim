// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.4
//   protoc               v5.28.1
// source: pb/model/enum.proto

/* eslint-disable */

/** All possible stats that can be modified for a given target */
export enum Property {
  INVALID_PROP = 0,
  /** HP_BASE - HP = HP_BASE * (1 + HP_PERCENT) + HP_FLAT + HP_CONVERT */
  HP_BASE = 1,
  HP_PERCENT = 2,
  HP_FLAT = 3,
  HP_CONVERT = 4,
  /** ATK_BASE - ATK = ATK_BASE * (1 + ATK_PERCENT) + ATK_FLAT + ATK_CONVERT */
  ATK_BASE = 5,
  ATK_PERCENT = 6,
  ATK_FLAT = 7,
  ATK_CONVERT = 8,
  /** DEF_BASE - DEF = DEF_BASE * (1 + DEF_PERCENT) + DEF_FLAT + DEF_CONVERT */
  DEF_BASE = 9,
  DEF_PERCENT = 10,
  DEF_FLAT = 11,
  DEF_CONVERT = 12,
  /** SPD_BASE - SPD = SPD_BASE * (1 + SPD_PERCENT) + SPD_FLAT + SPD_CONVERT */
  SPD_BASE = 13,
  SPD_PERCENT = 14,
  SPD_FLAT = 15,
  SPD_CONVERT = 16,
  /** CRIT_CHANCE - Crit */
  CRIT_CHANCE = 17,
  CRIT_DMG = 18,
  /** ENERGY_REGEN - Energy Regen */
  ENERGY_REGEN = 19,
  ENERGY_REGEN_CONVERT = 20,
  /** EFFECT_HIT_RATE - Effect Hit Rate */
  EFFECT_HIT_RATE = 21,
  EFFECT_HIT_RATE_CONVERT = 22,
  /** EFFECT_RES - Effect RES */
  EFFECT_RES = 23,
  EFFECT_RES_CONVERT = 24,
  /** HEAL_BOOST - Increases heal strength that are created by target */
  HEAL_BOOST = 25,
  HEAL_BOOST_CONVERT = 26,
  /** HEAL_TAKEN - Increases heal strength that are applied to target */
  HEAL_TAKEN = 27,
  /** SHIELD_BOOST - Increases shield strength that are created by target */
  SHIELD_BOOST = 28,
  /** SHIELD_TAKEN - Increases shield strength that are applied to target */
  SHIELD_TAKEN = 29,
  /** AGGRO_BASE - AGGRO = AGGRO_BASE * (1 + AGGRO_PERCENT) + AGGRO_FLAT */
  AGGRO_BASE = 30,
  AGGRO_PERCENT = 31,
  AGGRO_FLAT = 32,
  /** BREAK_EFFECT - Break Effect */
  BREAK_EFFECT = 33,
  /** ALL_DMG_RES - Damage Resistances (RES = ALL_DMG_RES + ELEMENT_DMG_RES) */
  ALL_DMG_RES = 34,
  PHYSICAL_DMG_RES = 35,
  FIRE_DMG_RES = 36,
  ICE_DMG_RES = 37,
  THUNDER_DMG_RES = 38,
  QUANTUM_DMG_RES = 39,
  IMAGINARY_DMG_RES = 40,
  WIND_DMG_RES = 41,
  /** PHYSICAL_PEN - Elemental Penetrates */
  PHYSICAL_PEN = 42,
  FIRE_PEN = 43,
  ICE_PEN = 44,
  THUNDER_PEN = 45,
  QUANTUM_PEN = 46,
  IMAGINARY_PEN = 47,
  WIND_PEN = 48,
  /** ALL_DMG_TAKEN - Damage Taken Boost (TAKEN = ALL_DMG_TAKEN + ELEMENT_DMG_TAKEN) */
  ALL_DMG_TAKEN = 49,
  PHYSICAL_DMG_TAKEN = 50,
  FIRE_DMG_TAKEN = 51,
  ICE_DMG_TAKEN = 52,
  THUNDER_DMG_TAKEN = 53,
  QUANTUM_DMG_TAKEN = 54,
  IMAGINARY_DMG_TAKEN = 55,
  WIND_DMG_TAKEN = 56,
  /** ALL_DMG_PERCENT - DMG% increases (DMG% = ALL_DMG% + ELEMENT_DMG% + DOT_DMG%) */
  ALL_DMG_PERCENT = 57,
  DOT_DMG_PERCENT = 58,
  FIRE_DMG_PERCENT = 59,
  ICE_DMG_PERCENT = 60,
  THUNDER_DMG_PERCENT = 61,
  QUANTUM_DMG_PERCENT = 62,
  IMAGINARY_DMG_PERCENT = 63,
  WIND_DMG_PERCENT = 64,
  PHYSICAL_DMG_PERCENT = 65,
  /** ALL_STANCE_DMG_PERCENT - Stance DMG% increase (damage to toughness bar, not break effect) */
  ALL_STANCE_DMG_PERCENT = 66,
  /**
   * ALL_DMG_REDUCE - Multiplicative DMG reduction CURRENT_DMG_REDUCE *= (1 - ADDED_DMG_REDUCE)
   * DMG_REDUCE from target attacked, FATIGUE from attacker
   */
  ALL_DMG_REDUCE = 90,
  FATIGUE = 91,
  /** MIN_FATIGUE - TODO: unnecessary? */
  MIN_FATIGUE = 92,
  UNRECOGNIZED = -1,
}

export function propertyFromJSON(object: any): Property {
  switch (object) {
    case 0:
    case "INVALID_PROP":
      return Property.INVALID_PROP;
    case 1:
    case "HP_BASE":
      return Property.HP_BASE;
    case 2:
    case "HP_PERCENT":
      return Property.HP_PERCENT;
    case 3:
    case "HP_FLAT":
      return Property.HP_FLAT;
    case 4:
    case "HP_CONVERT":
      return Property.HP_CONVERT;
    case 5:
    case "ATK_BASE":
      return Property.ATK_BASE;
    case 6:
    case "ATK_PERCENT":
      return Property.ATK_PERCENT;
    case 7:
    case "ATK_FLAT":
      return Property.ATK_FLAT;
    case 8:
    case "ATK_CONVERT":
      return Property.ATK_CONVERT;
    case 9:
    case "DEF_BASE":
      return Property.DEF_BASE;
    case 10:
    case "DEF_PERCENT":
      return Property.DEF_PERCENT;
    case 11:
    case "DEF_FLAT":
      return Property.DEF_FLAT;
    case 12:
    case "DEF_CONVERT":
      return Property.DEF_CONVERT;
    case 13:
    case "SPD_BASE":
      return Property.SPD_BASE;
    case 14:
    case "SPD_PERCENT":
      return Property.SPD_PERCENT;
    case 15:
    case "SPD_FLAT":
      return Property.SPD_FLAT;
    case 16:
    case "SPD_CONVERT":
      return Property.SPD_CONVERT;
    case 17:
    case "CRIT_CHANCE":
      return Property.CRIT_CHANCE;
    case 18:
    case "CRIT_DMG":
      return Property.CRIT_DMG;
    case 19:
    case "ENERGY_REGEN":
      return Property.ENERGY_REGEN;
    case 20:
    case "ENERGY_REGEN_CONVERT":
      return Property.ENERGY_REGEN_CONVERT;
    case 21:
    case "EFFECT_HIT_RATE":
      return Property.EFFECT_HIT_RATE;
    case 22:
    case "EFFECT_HIT_RATE_CONVERT":
      return Property.EFFECT_HIT_RATE_CONVERT;
    case 23:
    case "EFFECT_RES":
      return Property.EFFECT_RES;
    case 24:
    case "EFFECT_RES_CONVERT":
      return Property.EFFECT_RES_CONVERT;
    case 25:
    case "HEAL_BOOST":
      return Property.HEAL_BOOST;
    case 26:
    case "HEAL_BOOST_CONVERT":
      return Property.HEAL_BOOST_CONVERT;
    case 27:
    case "HEAL_TAKEN":
      return Property.HEAL_TAKEN;
    case 28:
    case "SHIELD_BOOST":
      return Property.SHIELD_BOOST;
    case 29:
    case "SHIELD_TAKEN":
      return Property.SHIELD_TAKEN;
    case 30:
    case "AGGRO_BASE":
      return Property.AGGRO_BASE;
    case 31:
    case "AGGRO_PERCENT":
      return Property.AGGRO_PERCENT;
    case 32:
    case "AGGRO_FLAT":
      return Property.AGGRO_FLAT;
    case 33:
    case "BREAK_EFFECT":
      return Property.BREAK_EFFECT;
    case 34:
    case "ALL_DMG_RES":
      return Property.ALL_DMG_RES;
    case 35:
    case "PHYSICAL_DMG_RES":
      return Property.PHYSICAL_DMG_RES;
    case 36:
    case "FIRE_DMG_RES":
      return Property.FIRE_DMG_RES;
    case 37:
    case "ICE_DMG_RES":
      return Property.ICE_DMG_RES;
    case 38:
    case "THUNDER_DMG_RES":
      return Property.THUNDER_DMG_RES;
    case 39:
    case "QUANTUM_DMG_RES":
      return Property.QUANTUM_DMG_RES;
    case 40:
    case "IMAGINARY_DMG_RES":
      return Property.IMAGINARY_DMG_RES;
    case 41:
    case "WIND_DMG_RES":
      return Property.WIND_DMG_RES;
    case 42:
    case "PHYSICAL_PEN":
      return Property.PHYSICAL_PEN;
    case 43:
    case "FIRE_PEN":
      return Property.FIRE_PEN;
    case 44:
    case "ICE_PEN":
      return Property.ICE_PEN;
    case 45:
    case "THUNDER_PEN":
      return Property.THUNDER_PEN;
    case 46:
    case "QUANTUM_PEN":
      return Property.QUANTUM_PEN;
    case 47:
    case "IMAGINARY_PEN":
      return Property.IMAGINARY_PEN;
    case 48:
    case "WIND_PEN":
      return Property.WIND_PEN;
    case 49:
    case "ALL_DMG_TAKEN":
      return Property.ALL_DMG_TAKEN;
    case 50:
    case "PHYSICAL_DMG_TAKEN":
      return Property.PHYSICAL_DMG_TAKEN;
    case 51:
    case "FIRE_DMG_TAKEN":
      return Property.FIRE_DMG_TAKEN;
    case 52:
    case "ICE_DMG_TAKEN":
      return Property.ICE_DMG_TAKEN;
    case 53:
    case "THUNDER_DMG_TAKEN":
      return Property.THUNDER_DMG_TAKEN;
    case 54:
    case "QUANTUM_DMG_TAKEN":
      return Property.QUANTUM_DMG_TAKEN;
    case 55:
    case "IMAGINARY_DMG_TAKEN":
      return Property.IMAGINARY_DMG_TAKEN;
    case 56:
    case "WIND_DMG_TAKEN":
      return Property.WIND_DMG_TAKEN;
    case 57:
    case "ALL_DMG_PERCENT":
      return Property.ALL_DMG_PERCENT;
    case 58:
    case "DOT_DMG_PERCENT":
      return Property.DOT_DMG_PERCENT;
    case 59:
    case "FIRE_DMG_PERCENT":
      return Property.FIRE_DMG_PERCENT;
    case 60:
    case "ICE_DMG_PERCENT":
      return Property.ICE_DMG_PERCENT;
    case 61:
    case "THUNDER_DMG_PERCENT":
      return Property.THUNDER_DMG_PERCENT;
    case 62:
    case "QUANTUM_DMG_PERCENT":
      return Property.QUANTUM_DMG_PERCENT;
    case 63:
    case "IMAGINARY_DMG_PERCENT":
      return Property.IMAGINARY_DMG_PERCENT;
    case 64:
    case "WIND_DMG_PERCENT":
      return Property.WIND_DMG_PERCENT;
    case 65:
    case "PHYSICAL_DMG_PERCENT":
      return Property.PHYSICAL_DMG_PERCENT;
    case 66:
    case "ALL_STANCE_DMG_PERCENT":
      return Property.ALL_STANCE_DMG_PERCENT;
    case 90:
    case "ALL_DMG_REDUCE":
      return Property.ALL_DMG_REDUCE;
    case 91:
    case "FATIGUE":
      return Property.FATIGUE;
    case 92:
    case "MIN_FATIGUE":
      return Property.MIN_FATIGUE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Property.UNRECOGNIZED;
  }
}

export function propertyToJSON(object: Property): string {
  switch (object) {
    case Property.INVALID_PROP:
      return "INVALID_PROP";
    case Property.HP_BASE:
      return "HP_BASE";
    case Property.HP_PERCENT:
      return "HP_PERCENT";
    case Property.HP_FLAT:
      return "HP_FLAT";
    case Property.HP_CONVERT:
      return "HP_CONVERT";
    case Property.ATK_BASE:
      return "ATK_BASE";
    case Property.ATK_PERCENT:
      return "ATK_PERCENT";
    case Property.ATK_FLAT:
      return "ATK_FLAT";
    case Property.ATK_CONVERT:
      return "ATK_CONVERT";
    case Property.DEF_BASE:
      return "DEF_BASE";
    case Property.DEF_PERCENT:
      return "DEF_PERCENT";
    case Property.DEF_FLAT:
      return "DEF_FLAT";
    case Property.DEF_CONVERT:
      return "DEF_CONVERT";
    case Property.SPD_BASE:
      return "SPD_BASE";
    case Property.SPD_PERCENT:
      return "SPD_PERCENT";
    case Property.SPD_FLAT:
      return "SPD_FLAT";
    case Property.SPD_CONVERT:
      return "SPD_CONVERT";
    case Property.CRIT_CHANCE:
      return "CRIT_CHANCE";
    case Property.CRIT_DMG:
      return "CRIT_DMG";
    case Property.ENERGY_REGEN:
      return "ENERGY_REGEN";
    case Property.ENERGY_REGEN_CONVERT:
      return "ENERGY_REGEN_CONVERT";
    case Property.EFFECT_HIT_RATE:
      return "EFFECT_HIT_RATE";
    case Property.EFFECT_HIT_RATE_CONVERT:
      return "EFFECT_HIT_RATE_CONVERT";
    case Property.EFFECT_RES:
      return "EFFECT_RES";
    case Property.EFFECT_RES_CONVERT:
      return "EFFECT_RES_CONVERT";
    case Property.HEAL_BOOST:
      return "HEAL_BOOST";
    case Property.HEAL_BOOST_CONVERT:
      return "HEAL_BOOST_CONVERT";
    case Property.HEAL_TAKEN:
      return "HEAL_TAKEN";
    case Property.SHIELD_BOOST:
      return "SHIELD_BOOST";
    case Property.SHIELD_TAKEN:
      return "SHIELD_TAKEN";
    case Property.AGGRO_BASE:
      return "AGGRO_BASE";
    case Property.AGGRO_PERCENT:
      return "AGGRO_PERCENT";
    case Property.AGGRO_FLAT:
      return "AGGRO_FLAT";
    case Property.BREAK_EFFECT:
      return "BREAK_EFFECT";
    case Property.ALL_DMG_RES:
      return "ALL_DMG_RES";
    case Property.PHYSICAL_DMG_RES:
      return "PHYSICAL_DMG_RES";
    case Property.FIRE_DMG_RES:
      return "FIRE_DMG_RES";
    case Property.ICE_DMG_RES:
      return "ICE_DMG_RES";
    case Property.THUNDER_DMG_RES:
      return "THUNDER_DMG_RES";
    case Property.QUANTUM_DMG_RES:
      return "QUANTUM_DMG_RES";
    case Property.IMAGINARY_DMG_RES:
      return "IMAGINARY_DMG_RES";
    case Property.WIND_DMG_RES:
      return "WIND_DMG_RES";
    case Property.PHYSICAL_PEN:
      return "PHYSICAL_PEN";
    case Property.FIRE_PEN:
      return "FIRE_PEN";
    case Property.ICE_PEN:
      return "ICE_PEN";
    case Property.THUNDER_PEN:
      return "THUNDER_PEN";
    case Property.QUANTUM_PEN:
      return "QUANTUM_PEN";
    case Property.IMAGINARY_PEN:
      return "IMAGINARY_PEN";
    case Property.WIND_PEN:
      return "WIND_PEN";
    case Property.ALL_DMG_TAKEN:
      return "ALL_DMG_TAKEN";
    case Property.PHYSICAL_DMG_TAKEN:
      return "PHYSICAL_DMG_TAKEN";
    case Property.FIRE_DMG_TAKEN:
      return "FIRE_DMG_TAKEN";
    case Property.ICE_DMG_TAKEN:
      return "ICE_DMG_TAKEN";
    case Property.THUNDER_DMG_TAKEN:
      return "THUNDER_DMG_TAKEN";
    case Property.QUANTUM_DMG_TAKEN:
      return "QUANTUM_DMG_TAKEN";
    case Property.IMAGINARY_DMG_TAKEN:
      return "IMAGINARY_DMG_TAKEN";
    case Property.WIND_DMG_TAKEN:
      return "WIND_DMG_TAKEN";
    case Property.ALL_DMG_PERCENT:
      return "ALL_DMG_PERCENT";
    case Property.DOT_DMG_PERCENT:
      return "DOT_DMG_PERCENT";
    case Property.FIRE_DMG_PERCENT:
      return "FIRE_DMG_PERCENT";
    case Property.ICE_DMG_PERCENT:
      return "ICE_DMG_PERCENT";
    case Property.THUNDER_DMG_PERCENT:
      return "THUNDER_DMG_PERCENT";
    case Property.QUANTUM_DMG_PERCENT:
      return "QUANTUM_DMG_PERCENT";
    case Property.IMAGINARY_DMG_PERCENT:
      return "IMAGINARY_DMG_PERCENT";
    case Property.WIND_DMG_PERCENT:
      return "WIND_DMG_PERCENT";
    case Property.PHYSICAL_DMG_PERCENT:
      return "PHYSICAL_DMG_PERCENT";
    case Property.ALL_STANCE_DMG_PERCENT:
      return "ALL_STANCE_DMG_PERCENT";
    case Property.ALL_DMG_REDUCE:
      return "ALL_DMG_REDUCE";
    case Property.FATIGUE:
      return "FATIGUE";
    case Property.MIN_FATIGUE:
      return "MIN_FATIGUE";
    case Property.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BehaviorFlag {
  INVALID_FLAG = 0,
  DISABLE_ACTION = 1,
  /** STAT_CTRL - STATS_ are the behavior flags primarily used for DebuffRES */
  STAT_CTRL = 100,
  STAT_CTRL_FROZEN = 101,
  STAT_CTRL_STUN = 102,
  STAT_DOT = 103,
  STAT_DOT_POISON = 104,
  STAT_DOT_ELECTRIC = 105,
  STAT_DOT_BLEED = 106,
  STAT_DOT_BURN = 107,
  STAT_SPEED_DOWN = 108,
  STAT_FATIGUE = 110,
  STAT_DEF_DOWN = 109,
  STAT_CONFINE = 111,
  STAT_BURST = 112,
  STAT_SPEED_UP = 113,
  STAT_ATTACH_WEAKNESS = 114,
  STAT_ENTANGLE = 115,
  UNRECOGNIZED = -1,
}

export function behaviorFlagFromJSON(object: any): BehaviorFlag {
  switch (object) {
    case 0:
    case "INVALID_FLAG":
      return BehaviorFlag.INVALID_FLAG;
    case 1:
    case "DISABLE_ACTION":
      return BehaviorFlag.DISABLE_ACTION;
    case 100:
    case "STAT_CTRL":
      return BehaviorFlag.STAT_CTRL;
    case 101:
    case "STAT_CTRL_FROZEN":
      return BehaviorFlag.STAT_CTRL_FROZEN;
    case 102:
    case "STAT_CTRL_STUN":
      return BehaviorFlag.STAT_CTRL_STUN;
    case 103:
    case "STAT_DOT":
      return BehaviorFlag.STAT_DOT;
    case 104:
    case "STAT_DOT_POISON":
      return BehaviorFlag.STAT_DOT_POISON;
    case 105:
    case "STAT_DOT_ELECTRIC":
      return BehaviorFlag.STAT_DOT_ELECTRIC;
    case 106:
    case "STAT_DOT_BLEED":
      return BehaviorFlag.STAT_DOT_BLEED;
    case 107:
    case "STAT_DOT_BURN":
      return BehaviorFlag.STAT_DOT_BURN;
    case 108:
    case "STAT_SPEED_DOWN":
      return BehaviorFlag.STAT_SPEED_DOWN;
    case 110:
    case "STAT_FATIGUE":
      return BehaviorFlag.STAT_FATIGUE;
    case 109:
    case "STAT_DEF_DOWN":
      return BehaviorFlag.STAT_DEF_DOWN;
    case 111:
    case "STAT_CONFINE":
      return BehaviorFlag.STAT_CONFINE;
    case 112:
    case "STAT_BURST":
      return BehaviorFlag.STAT_BURST;
    case 113:
    case "STAT_SPEED_UP":
      return BehaviorFlag.STAT_SPEED_UP;
    case 114:
    case "STAT_ATTACH_WEAKNESS":
      return BehaviorFlag.STAT_ATTACH_WEAKNESS;
    case 115:
    case "STAT_ENTANGLE":
      return BehaviorFlag.STAT_ENTANGLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BehaviorFlag.UNRECOGNIZED;
  }
}

export function behaviorFlagToJSON(object: BehaviorFlag): string {
  switch (object) {
    case BehaviorFlag.INVALID_FLAG:
      return "INVALID_FLAG";
    case BehaviorFlag.DISABLE_ACTION:
      return "DISABLE_ACTION";
    case BehaviorFlag.STAT_CTRL:
      return "STAT_CTRL";
    case BehaviorFlag.STAT_CTRL_FROZEN:
      return "STAT_CTRL_FROZEN";
    case BehaviorFlag.STAT_CTRL_STUN:
      return "STAT_CTRL_STUN";
    case BehaviorFlag.STAT_DOT:
      return "STAT_DOT";
    case BehaviorFlag.STAT_DOT_POISON:
      return "STAT_DOT_POISON";
    case BehaviorFlag.STAT_DOT_ELECTRIC:
      return "STAT_DOT_ELECTRIC";
    case BehaviorFlag.STAT_DOT_BLEED:
      return "STAT_DOT_BLEED";
    case BehaviorFlag.STAT_DOT_BURN:
      return "STAT_DOT_BURN";
    case BehaviorFlag.STAT_SPEED_DOWN:
      return "STAT_SPEED_DOWN";
    case BehaviorFlag.STAT_FATIGUE:
      return "STAT_FATIGUE";
    case BehaviorFlag.STAT_DEF_DOWN:
      return "STAT_DEF_DOWN";
    case BehaviorFlag.STAT_CONFINE:
      return "STAT_CONFINE";
    case BehaviorFlag.STAT_BURST:
      return "STAT_BURST";
    case BehaviorFlag.STAT_SPEED_UP:
      return "STAT_SPEED_UP";
    case BehaviorFlag.STAT_ATTACH_WEAKNESS:
      return "STAT_ATTACH_WEAKNESS";
    case BehaviorFlag.STAT_ENTANGLE:
      return "STAT_ENTANGLE";
    case BehaviorFlag.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum StatusType {
  UNKNOWN_STATUS = 0,
  STATUS_BUFF = 1,
  STATUS_DEBUFF = 2,
  UNRECOGNIZED = -1,
}

export function statusTypeFromJSON(object: any): StatusType {
  switch (object) {
    case 0:
    case "UNKNOWN_STATUS":
      return StatusType.UNKNOWN_STATUS;
    case 1:
    case "STATUS_BUFF":
      return StatusType.STATUS_BUFF;
    case 2:
    case "STATUS_DEBUFF":
      return StatusType.STATUS_DEBUFF;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StatusType.UNRECOGNIZED;
  }
}

export function statusTypeToJSON(object: StatusType): string {
  switch (object) {
    case StatusType.UNKNOWN_STATUS:
      return "UNKNOWN_STATUS";
    case StatusType.STATUS_BUFF:
      return "STATUS_BUFF";
    case StatusType.STATUS_DEBUFF:
      return "STATUS_DEBUFF";
    case StatusType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum DispelOrder {
  INVALID_DISPEL_ORDER = 0,
  LAST_ADDED = 1,
  FIRST_ADDED = 2,
  RANDOM = 3,
  UNRECOGNIZED = -1,
}

export function dispelOrderFromJSON(object: any): DispelOrder {
  switch (object) {
    case 0:
    case "INVALID_DISPEL_ORDER":
      return DispelOrder.INVALID_DISPEL_ORDER;
    case 1:
    case "LAST_ADDED":
      return DispelOrder.LAST_ADDED;
    case 2:
    case "FIRST_ADDED":
      return DispelOrder.FIRST_ADDED;
    case 3:
    case "RANDOM":
      return DispelOrder.RANDOM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DispelOrder.UNRECOGNIZED;
  }
}

export function dispelOrderToJSON(object: DispelOrder): string {
  switch (object) {
    case DispelOrder.INVALID_DISPEL_ORDER:
      return "INVALID_DISPEL_ORDER";
    case DispelOrder.LAST_ADDED:
      return "LAST_ADDED";
    case DispelOrder.FIRST_ADDED:
      return "FIRST_ADDED";
    case DispelOrder.RANDOM:
      return "RANDOM";
    case DispelOrder.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Path {
  INVALID_PATH = 0,
  PRESERVATION = 1,
  HUNT = 2,
  ERUDITION = 3,
  NIHILITY = 4,
  DESTRUCTION = 5,
  HARMONY = 6,
  ABUNDANCE = 7,
  UNRECOGNIZED = -1,
}

export function pathFromJSON(object: any): Path {
  switch (object) {
    case 0:
    case "INVALID_PATH":
      return Path.INVALID_PATH;
    case 1:
    case "PRESERVATION":
      return Path.PRESERVATION;
    case 2:
    case "HUNT":
      return Path.HUNT;
    case 3:
    case "ERUDITION":
      return Path.ERUDITION;
    case 4:
    case "NIHILITY":
      return Path.NIHILITY;
    case 5:
    case "DESTRUCTION":
      return Path.DESTRUCTION;
    case 6:
    case "HARMONY":
      return Path.HARMONY;
    case 7:
    case "ABUNDANCE":
      return Path.ABUNDANCE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Path.UNRECOGNIZED;
  }
}

export function pathToJSON(object: Path): string {
  switch (object) {
    case Path.INVALID_PATH:
      return "INVALID_PATH";
    case Path.PRESERVATION:
      return "PRESERVATION";
    case Path.HUNT:
      return "HUNT";
    case Path.ERUDITION:
      return "ERUDITION";
    case Path.NIHILITY:
      return "NIHILITY";
    case Path.DESTRUCTION:
      return "DESTRUCTION";
    case Path.HARMONY:
      return "HARMONY";
    case Path.ABUNDANCE:
      return "ABUNDANCE";
    case Path.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum DamageType {
  INVALID_DAMAGE_TYPE = 0,
  PHYSICAL = 1,
  FIRE = 2,
  ICE = 3,
  THUNDER = 4,
  WIND = 5,
  QUANTUM = 6,
  IMAGINARY = 7,
  UNRECOGNIZED = -1,
}

export function damageTypeFromJSON(object: any): DamageType {
  switch (object) {
    case 0:
    case "INVALID_DAMAGE_TYPE":
      return DamageType.INVALID_DAMAGE_TYPE;
    case 1:
    case "PHYSICAL":
      return DamageType.PHYSICAL;
    case 2:
    case "FIRE":
      return DamageType.FIRE;
    case 3:
    case "ICE":
      return DamageType.ICE;
    case 4:
    case "THUNDER":
      return DamageType.THUNDER;
    case 5:
    case "WIND":
      return DamageType.WIND;
    case 6:
    case "QUANTUM":
      return DamageType.QUANTUM;
    case 7:
    case "IMAGINARY":
      return DamageType.IMAGINARY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DamageType.UNRECOGNIZED;
  }
}

export function damageTypeToJSON(object: DamageType): string {
  switch (object) {
    case DamageType.INVALID_DAMAGE_TYPE:
      return "INVALID_DAMAGE_TYPE";
    case DamageType.PHYSICAL:
      return "PHYSICAL";
    case DamageType.FIRE:
      return "FIRE";
    case DamageType.ICE:
      return "ICE";
    case DamageType.THUNDER:
      return "THUNDER";
    case DamageType.WIND:
      return "WIND";
    case DamageType.QUANTUM:
      return "QUANTUM";
    case DamageType.IMAGINARY:
      return "IMAGINARY";
    case DamageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum AttackType {
  INVALID_ATTACK_TYPE = 0,
  NORMAL = 1,
  SKILL = 2,
  ULT = 3,
  DOT = 4,
  PURSUED = 5,
  MAZE = 6,
  MAZE_NORMAL = 7,
  INSERT = 8,
  ELEMENT_DAMAGE = 9,
  UNRECOGNIZED = -1,
}

export function attackTypeFromJSON(object: any): AttackType {
  switch (object) {
    case 0:
    case "INVALID_ATTACK_TYPE":
      return AttackType.INVALID_ATTACK_TYPE;
    case 1:
    case "NORMAL":
      return AttackType.NORMAL;
    case 2:
    case "SKILL":
      return AttackType.SKILL;
    case 3:
    case "ULT":
      return AttackType.ULT;
    case 4:
    case "DOT":
      return AttackType.DOT;
    case 5:
    case "PURSUED":
      return AttackType.PURSUED;
    case 6:
    case "MAZE":
      return AttackType.MAZE;
    case 7:
    case "MAZE_NORMAL":
      return AttackType.MAZE_NORMAL;
    case 8:
    case "INSERT":
      return AttackType.INSERT;
    case 9:
    case "ELEMENT_DAMAGE":
      return AttackType.ELEMENT_DAMAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AttackType.UNRECOGNIZED;
  }
}

export function attackTypeToJSON(object: AttackType): string {
  switch (object) {
    case AttackType.INVALID_ATTACK_TYPE:
      return "INVALID_ATTACK_TYPE";
    case AttackType.NORMAL:
      return "NORMAL";
    case AttackType.SKILL:
      return "SKILL";
    case AttackType.ULT:
      return "ULT";
    case AttackType.DOT:
      return "DOT";
    case AttackType.PURSUED:
      return "PURSUED";
    case AttackType.MAZE:
      return "MAZE";
    case AttackType.MAZE_NORMAL:
      return "MAZE_NORMAL";
    case AttackType.INSERT:
      return "INSERT";
    case AttackType.ELEMENT_DAMAGE:
      return "ELEMENT_DAMAGE";
    case AttackType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum DamageFormula {
  INVALID_DAMAGE_FORMULA = 0,
  BY_ATK = 1,
  BY_DEF = 2,
  BY_MAX_HP = 3,
  BY_BREAK_DAMAGE = 4,
  UNRECOGNIZED = -1,
}

export function damageFormulaFromJSON(object: any): DamageFormula {
  switch (object) {
    case 0:
    case "INVALID_DAMAGE_FORMULA":
      return DamageFormula.INVALID_DAMAGE_FORMULA;
    case 1:
    case "BY_ATK":
      return DamageFormula.BY_ATK;
    case 2:
    case "BY_DEF":
      return DamageFormula.BY_DEF;
    case 3:
    case "BY_MAX_HP":
      return DamageFormula.BY_MAX_HP;
    case 4:
    case "BY_BREAK_DAMAGE":
      return DamageFormula.BY_BREAK_DAMAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DamageFormula.UNRECOGNIZED;
  }
}

export function damageFormulaToJSON(object: DamageFormula): string {
  switch (object) {
    case DamageFormula.INVALID_DAMAGE_FORMULA:
      return "INVALID_DAMAGE_FORMULA";
    case DamageFormula.BY_ATK:
      return "BY_ATK";
    case DamageFormula.BY_DEF:
      return "BY_DEF";
    case DamageFormula.BY_MAX_HP:
      return "BY_MAX_HP";
    case DamageFormula.BY_BREAK_DAMAGE:
      return "BY_BREAK_DAMAGE";
    case DamageFormula.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum HealFormula {
  INVALID_HEAL_FORMULA = 0,
  BY_HEALER_ATK = 1,
  BY_HEALER_DEF = 2,
  BY_HEALER_MAX_HP = 3,
  BY_TARGET_MAX_HP = 4,
  BY_TARGET_LOST_HP = 5,
  UNRECOGNIZED = -1,
}

export function healFormulaFromJSON(object: any): HealFormula {
  switch (object) {
    case 0:
    case "INVALID_HEAL_FORMULA":
      return HealFormula.INVALID_HEAL_FORMULA;
    case 1:
    case "BY_HEALER_ATK":
      return HealFormula.BY_HEALER_ATK;
    case 2:
    case "BY_HEALER_DEF":
      return HealFormula.BY_HEALER_DEF;
    case 3:
    case "BY_HEALER_MAX_HP":
      return HealFormula.BY_HEALER_MAX_HP;
    case 4:
    case "BY_TARGET_MAX_HP":
      return HealFormula.BY_TARGET_MAX_HP;
    case 5:
    case "BY_TARGET_LOST_HP":
      return HealFormula.BY_TARGET_LOST_HP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HealFormula.UNRECOGNIZED;
  }
}

export function healFormulaToJSON(object: HealFormula): string {
  switch (object) {
    case HealFormula.INVALID_HEAL_FORMULA:
      return "INVALID_HEAL_FORMULA";
    case HealFormula.BY_HEALER_ATK:
      return "BY_HEALER_ATK";
    case HealFormula.BY_HEALER_DEF:
      return "BY_HEALER_DEF";
    case HealFormula.BY_HEALER_MAX_HP:
      return "BY_HEALER_MAX_HP";
    case HealFormula.BY_TARGET_MAX_HP:
      return "BY_TARGET_MAX_HP";
    case HealFormula.BY_TARGET_LOST_HP:
      return "BY_TARGET_LOST_HP";
    case HealFormula.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ShieldFormula {
  INVALID_SHIELD_FORMULA = 0,
  SHIELD_BY_SHIELDER_ATK = 1,
  SHIELD_BY_SHIELDER_DEF = 2,
  SHIELD_BY_SHIELDER_MAX_HP = 3,
  SHIELD_BY_TARGET_MAX_HP = 4,
  SHIELD_BY_SHIELDER_TOTAL_SHIELD = 5,
  UNRECOGNIZED = -1,
}

export function shieldFormulaFromJSON(object: any): ShieldFormula {
  switch (object) {
    case 0:
    case "INVALID_SHIELD_FORMULA":
      return ShieldFormula.INVALID_SHIELD_FORMULA;
    case 1:
    case "SHIELD_BY_SHIELDER_ATK":
      return ShieldFormula.SHIELD_BY_SHIELDER_ATK;
    case 2:
    case "SHIELD_BY_SHIELDER_DEF":
      return ShieldFormula.SHIELD_BY_SHIELDER_DEF;
    case 3:
    case "SHIELD_BY_SHIELDER_MAX_HP":
      return ShieldFormula.SHIELD_BY_SHIELDER_MAX_HP;
    case 4:
    case "SHIELD_BY_TARGET_MAX_HP":
      return ShieldFormula.SHIELD_BY_TARGET_MAX_HP;
    case 5:
    case "SHIELD_BY_SHIELDER_TOTAL_SHIELD":
      return ShieldFormula.SHIELD_BY_SHIELDER_TOTAL_SHIELD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ShieldFormula.UNRECOGNIZED;
  }
}

export function shieldFormulaToJSON(object: ShieldFormula): string {
  switch (object) {
    case ShieldFormula.INVALID_SHIELD_FORMULA:
      return "INVALID_SHIELD_FORMULA";
    case ShieldFormula.SHIELD_BY_SHIELDER_ATK:
      return "SHIELD_BY_SHIELDER_ATK";
    case ShieldFormula.SHIELD_BY_SHIELDER_DEF:
      return "SHIELD_BY_SHIELDER_DEF";
    case ShieldFormula.SHIELD_BY_SHIELDER_MAX_HP:
      return "SHIELD_BY_SHIELDER_MAX_HP";
    case ShieldFormula.SHIELD_BY_TARGET_MAX_HP:
      return "SHIELD_BY_TARGET_MAX_HP";
    case ShieldFormula.SHIELD_BY_SHIELDER_TOTAL_SHIELD:
      return "SHIELD_BY_SHIELDER_TOTAL_SHIELD";
    case ShieldFormula.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ModifyHPRatioType {
  INVALID_RATIO_TYPE = 0,
  MAX_HP = 1,
  CURRENT_HP = 2,
  UNRECOGNIZED = -1,
}

export function modifyHPRatioTypeFromJSON(object: any): ModifyHPRatioType {
  switch (object) {
    case 0:
    case "INVALID_RATIO_TYPE":
      return ModifyHPRatioType.INVALID_RATIO_TYPE;
    case 1:
    case "MAX_HP":
      return ModifyHPRatioType.MAX_HP;
    case 2:
    case "CURRENT_HP":
      return ModifyHPRatioType.CURRENT_HP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ModifyHPRatioType.UNRECOGNIZED;
  }
}

export function modifyHPRatioTypeToJSON(object: ModifyHPRatioType): string {
  switch (object) {
    case ModifyHPRatioType.INVALID_RATIO_TYPE:
      return "INVALID_RATIO_TYPE";
    case ModifyHPRatioType.MAX_HP:
      return "MAX_HP";
    case ModifyHPRatioType.CURRENT_HP:
      return "CURRENT_HP";
    case ModifyHPRatioType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TargetType {
  INVALID_TARGET_TYPE = 0,
  SELF = 1,
  ALLIES = 2,
  ENEMIES = 3,
  UNRECOGNIZED = -1,
}

export function targetTypeFromJSON(object: any): TargetType {
  switch (object) {
    case 0:
    case "INVALID_TARGET_TYPE":
      return TargetType.INVALID_TARGET_TYPE;
    case 1:
    case "SELF":
      return TargetType.SELF;
    case 2:
    case "ALLIES":
      return TargetType.ALLIES;
    case 3:
    case "ENEMIES":
      return TargetType.ENEMIES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TargetType.UNRECOGNIZED;
  }
}

export function targetTypeToJSON(object: TargetType): string {
  switch (object) {
    case TargetType.INVALID_TARGET_TYPE:
      return "INVALID_TARGET_TYPE";
    case TargetType.SELF:
      return "SELF";
    case TargetType.ALLIES:
      return "ALLIES";
    case TargetType.ENEMIES:
      return "ENEMIES";
    case TargetType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TerminationReason {
  INVALID_TERMINATION = 0,
  BATTLE_LOSS = 1,
  BATTLE_WIN = 2,
  TIMEOUT = 3,
  UNRECOGNIZED = -1,
}

export function terminationReasonFromJSON(object: any): TerminationReason {
  switch (object) {
    case 0:
    case "INVALID_TERMINATION":
      return TerminationReason.INVALID_TERMINATION;
    case 1:
    case "BATTLE_LOSS":
      return TerminationReason.BATTLE_LOSS;
    case 2:
    case "BATTLE_WIN":
      return TerminationReason.BATTLE_WIN;
    case 3:
    case "TIMEOUT":
      return TerminationReason.TIMEOUT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TerminationReason.UNRECOGNIZED;
  }
}

export function terminationReasonToJSON(object: TerminationReason): string {
  switch (object) {
    case TerminationReason.INVALID_TERMINATION:
      return "INVALID_TERMINATION";
    case TerminationReason.BATTLE_LOSS:
      return "BATTLE_LOSS";
    case TerminationReason.BATTLE_WIN:
      return "BATTLE_WIN";
    case TerminationReason.TIMEOUT:
      return "TIMEOUT";
    case TerminationReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
