// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/simimpact/srsim/pkg/engine/shield (interfaces: Absorb)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	key "github.com/simimpact/srsim/pkg/key"
)

// MockShield is a mock of Absorb interface.
type MockShield struct {
	ctrl     *gomock.Controller
	recorder *MockShieldMockRecorder
}

// MockShieldMockRecorder is the mock recorder for MockShield.
type MockShieldMockRecorder struct {
	mock *MockShield
}

// NewMockShield creates a new mock instance.
func NewMockShield(ctrl *gomock.Controller) *MockShield {
	mock := &MockShield{ctrl: ctrl}
	mock.recorder = &MockShieldMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShield) EXPECT() *MockShieldMockRecorder {
	return m.recorder
}

// AbsorbDamage mocks base method.
func (m *MockShield) AbsorbDamage(arg0 key.TargetID, arg1 float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbsorbDamage", arg0, arg1)
	ret0, _ := ret[0].(float64)
	return ret0
}

// AbsorbDamage indicates an expected call of AbsorbDamage.
func (mr *MockShieldMockRecorder) AbsorbDamage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbsorbDamage", reflect.TypeOf((*MockShield)(nil).AbsorbDamage), arg0, arg1)
}
