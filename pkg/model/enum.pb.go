// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.3
// source: pb/model/enum.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// All possible stats that can be modified for a given target
type Property int32

const (
	Property_INVALID_PROP Property = 0
	// HP = HP_BASE * (1 + HP_PERCENT) + HP_FLAT + HP_CONVERT
	Property_HP_BASE    Property = 1
	Property_HP_PERCENT Property = 2
	Property_HP_FLAT    Property = 3
	Property_HP_CONVERT Property = 4
	// ATK = ATK_BASE * (1 + ATK_PERCENT) + ATK_FLAT + ATK_CONVERT
	Property_ATK_BASE    Property = 5
	Property_ATK_PERCENT Property = 6
	Property_ATK_FLAT    Property = 7
	Property_ATK_CONVERT Property = 8
	// DEF = DEF_BASE * (1 + DEF_PERCENT) + DEF_FLAT + DEF_CONVERT
	Property_DEF_BASE    Property = 9
	Property_DEF_PERCENT Property = 10
	Property_DEF_FLAT    Property = 11
	Property_DEF_CONVERT Property = 12
	// SPD = SPD_BASE * (1 + SPD_PERCENT) + SPD_FLAT + SPD_CONVERT
	Property_SPD_BASE    Property = 13
	Property_SPD_PERCENT Property = 14
	Property_SPD_FLAT    Property = 15
	Property_SPD_CONVERT Property = 16
	// Crit
	Property_CRIT_CHANCE Property = 17
	Property_CRIT_DMG    Property = 18
	// Energy Regen
	Property_ENERGY_REGEN         Property = 19
	Property_ENERGY_REGEN_CONVERT Property = 20
	// Effect Hit Rate
	Property_EFFECT_HIT_RATE         Property = 21
	Property_EFFECT_HIT_RATE_CONVERT Property = 22
	// Effect RES
	Property_EFFECT_RES         Property = 23
	Property_EFFECT_RES_CONVERT Property = 24
	// Increases heal strength that are created by target
	Property_HEAL_BOOST         Property = 25
	Property_HEAL_BOOST_CONVERT Property = 26
	// Increases heal strength that are applied to target
	Property_HEAL_TAKEN Property = 27
	// Increases shield strength that are created by target
	Property_SHIELD_BOOST Property = 28
	// Increases shield strength that are applied to target
	Property_SHIELD_TAKEN Property = 29
	// AGGRO = AGGRO_BASE * (1 + AGGRO_PERCENT) + AGGRO_FLAT
	Property_AGGRO_BASE    Property = 30
	Property_AGGRO_PERCENT Property = 31
	Property_AGGRO_FLAT    Property = 32
	// Break Effect
	Property_BREAK_EFFECT Property = 33
	// Damage Resistances (RES = ALL_DMG_RES + ELEMENT_DMG_RES)
	Property_ALL_DMG_RES       Property = 34
	Property_PHYSICAL_DMG_RES  Property = 35
	Property_FIRE_DMG_RES      Property = 36
	Property_ICE_DMG_RES       Property = 37
	Property_THUNDER_DMG_RES   Property = 38
	Property_QUANTUM_DMG_RES   Property = 39
	Property_IMAGINARY_DMG_RES Property = 40
	Property_WIND_DMG_RES      Property = 41
	// Elemental Penetrates
	Property_PHYSICAL_PEN  Property = 42
	Property_FIRE_PEN      Property = 43
	Property_ICE_PEN       Property = 44
	Property_THUNDER_PEN   Property = 45
	Property_QUANTUM_PEN   Property = 46
	Property_IMAGINARY_PEN Property = 47
	Property_WIND_PEN      Property = 48
	// Damage Taken Boost (TAKEN = ALL_DMG_TAKEN + ELEMENT_DMG_TAKEN)
	Property_ALL_DMG_TAKEN       Property = 49
	Property_PHYSICAL_DMG_TAKEN  Property = 50
	Property_FIRE_DMG_TAKEN      Property = 51
	Property_ICE_DMG_TAKEN       Property = 52
	Property_THUNDER_DMG_TAKEN   Property = 53
	Property_QUANTUM_DMG_TAKEN   Property = 54
	Property_IMAGINARY_DMG_TAKEN Property = 55
	Property_WIND_DMG_TAKEN      Property = 56
	// DMG% increases (DMG% = ALL_DMG% + ELEMENT_DMG% + DOT_DMG%)
	Property_ALL_DMG_PERCENT       Property = 57
	Property_DOT_DMG_PERCENT       Property = 58
	Property_FIRE_DMG_PERCENT      Property = 59
	Property_ICE_DMG_PERCENT       Property = 60
	Property_THUNDER_DMG_PERCENT   Property = 61
	Property_QUANTUM_DMG_PERCENT   Property = 62
	Property_IMAGINARY_DMG_PERCENT Property = 63
	Property_WIND_DMG_PERCENT      Property = 64
	Property_PHYSICAL_DMG_PERCENT  Property = 65
	// Stance DMG% increase (damage to toughness bar, not break effect)
	Property_ALL_STANCE_DMG_PERCENT Property = 66
	// Multiplicative DMG reduction CURRENT_DMG_REDUCE *= (1 - ADDED_DMG_REDUCE)
	// DMG_REDUCE from target attacked, FATIGUE from attacker
	Property_ALL_DMG_REDUCE Property = 90
	Property_FATIGUE        Property = 91
	Property_MIN_FATIGUE    Property = 92 // TODO: unnecessary?
)

// Enum value maps for Property.
var (
	Property_name = map[int32]string{
		0:  "INVALID_PROP",
		1:  "HP_BASE",
		2:  "HP_PERCENT",
		3:  "HP_FLAT",
		4:  "HP_CONVERT",
		5:  "ATK_BASE",
		6:  "ATK_PERCENT",
		7:  "ATK_FLAT",
		8:  "ATK_CONVERT",
		9:  "DEF_BASE",
		10: "DEF_PERCENT",
		11: "DEF_FLAT",
		12: "DEF_CONVERT",
		13: "SPD_BASE",
		14: "SPD_PERCENT",
		15: "SPD_FLAT",
		16: "SPD_CONVERT",
		17: "CRIT_CHANCE",
		18: "CRIT_DMG",
		19: "ENERGY_REGEN",
		20: "ENERGY_REGEN_CONVERT",
		21: "EFFECT_HIT_RATE",
		22: "EFFECT_HIT_RATE_CONVERT",
		23: "EFFECT_RES",
		24: "EFFECT_RES_CONVERT",
		25: "HEAL_BOOST",
		26: "HEAL_BOOST_CONVERT",
		27: "HEAL_TAKEN",
		28: "SHIELD_BOOST",
		29: "SHIELD_TAKEN",
		30: "AGGRO_BASE",
		31: "AGGRO_PERCENT",
		32: "AGGRO_FLAT",
		33: "BREAK_EFFECT",
		34: "ALL_DMG_RES",
		35: "PHYSICAL_DMG_RES",
		36: "FIRE_DMG_RES",
		37: "ICE_DMG_RES",
		38: "THUNDER_DMG_RES",
		39: "QUANTUM_DMG_RES",
		40: "IMAGINARY_DMG_RES",
		41: "WIND_DMG_RES",
		42: "PHYSICAL_PEN",
		43: "FIRE_PEN",
		44: "ICE_PEN",
		45: "THUNDER_PEN",
		46: "QUANTUM_PEN",
		47: "IMAGINARY_PEN",
		48: "WIND_PEN",
		49: "ALL_DMG_TAKEN",
		50: "PHYSICAL_DMG_TAKEN",
		51: "FIRE_DMG_TAKEN",
		52: "ICE_DMG_TAKEN",
		53: "THUNDER_DMG_TAKEN",
		54: "QUANTUM_DMG_TAKEN",
		55: "IMAGINARY_DMG_TAKEN",
		56: "WIND_DMG_TAKEN",
		57: "ALL_DMG_PERCENT",
		58: "DOT_DMG_PERCENT",
		59: "FIRE_DMG_PERCENT",
		60: "ICE_DMG_PERCENT",
		61: "THUNDER_DMG_PERCENT",
		62: "QUANTUM_DMG_PERCENT",
		63: "IMAGINARY_DMG_PERCENT",
		64: "WIND_DMG_PERCENT",
		65: "PHYSICAL_DMG_PERCENT",
		66: "ALL_STANCE_DMG_PERCENT",
		90: "ALL_DMG_REDUCE",
		91: "FATIGUE",
		92: "MIN_FATIGUE",
	}
	Property_value = map[string]int32{
		"INVALID_PROP":            0,
		"HP_BASE":                 1,
		"HP_PERCENT":              2,
		"HP_FLAT":                 3,
		"HP_CONVERT":              4,
		"ATK_BASE":                5,
		"ATK_PERCENT":             6,
		"ATK_FLAT":                7,
		"ATK_CONVERT":             8,
		"DEF_BASE":                9,
		"DEF_PERCENT":             10,
		"DEF_FLAT":                11,
		"DEF_CONVERT":             12,
		"SPD_BASE":                13,
		"SPD_PERCENT":             14,
		"SPD_FLAT":                15,
		"SPD_CONVERT":             16,
		"CRIT_CHANCE":             17,
		"CRIT_DMG":                18,
		"ENERGY_REGEN":            19,
		"ENERGY_REGEN_CONVERT":    20,
		"EFFECT_HIT_RATE":         21,
		"EFFECT_HIT_RATE_CONVERT": 22,
		"EFFECT_RES":              23,
		"EFFECT_RES_CONVERT":      24,
		"HEAL_BOOST":              25,
		"HEAL_BOOST_CONVERT":      26,
		"HEAL_TAKEN":              27,
		"SHIELD_BOOST":            28,
		"SHIELD_TAKEN":            29,
		"AGGRO_BASE":              30,
		"AGGRO_PERCENT":           31,
		"AGGRO_FLAT":              32,
		"BREAK_EFFECT":            33,
		"ALL_DMG_RES":             34,
		"PHYSICAL_DMG_RES":        35,
		"FIRE_DMG_RES":            36,
		"ICE_DMG_RES":             37,
		"THUNDER_DMG_RES":         38,
		"QUANTUM_DMG_RES":         39,
		"IMAGINARY_DMG_RES":       40,
		"WIND_DMG_RES":            41,
		"PHYSICAL_PEN":            42,
		"FIRE_PEN":                43,
		"ICE_PEN":                 44,
		"THUNDER_PEN":             45,
		"QUANTUM_PEN":             46,
		"IMAGINARY_PEN":           47,
		"WIND_PEN":                48,
		"ALL_DMG_TAKEN":           49,
		"PHYSICAL_DMG_TAKEN":      50,
		"FIRE_DMG_TAKEN":          51,
		"ICE_DMG_TAKEN":           52,
		"THUNDER_DMG_TAKEN":       53,
		"QUANTUM_DMG_TAKEN":       54,
		"IMAGINARY_DMG_TAKEN":     55,
		"WIND_DMG_TAKEN":          56,
		"ALL_DMG_PERCENT":         57,
		"DOT_DMG_PERCENT":         58,
		"FIRE_DMG_PERCENT":        59,
		"ICE_DMG_PERCENT":         60,
		"THUNDER_DMG_PERCENT":     61,
		"QUANTUM_DMG_PERCENT":     62,
		"IMAGINARY_DMG_PERCENT":   63,
		"WIND_DMG_PERCENT":        64,
		"PHYSICAL_DMG_PERCENT":    65,
		"ALL_STANCE_DMG_PERCENT":  66,
		"ALL_DMG_REDUCE":          90,
		"FATIGUE":                 91,
		"MIN_FATIGUE":             92,
	}
)

func (x Property) Enum() *Property {
	p := new(Property)
	*p = x
	return p
}

func (x Property) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Property) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_model_enum_proto_enumTypes[0].Descriptor()
}

func (Property) Type() protoreflect.EnumType {
	return &file_pb_model_enum_proto_enumTypes[0]
}

func (x Property) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Property.Descriptor instead.
func (Property) EnumDescriptor() ([]byte, []int) {
	return file_pb_model_enum_proto_rawDescGZIP(), []int{0}
}

type BehaviorFlag int32

const (
	BehaviorFlag_INVALID_FLAG   BehaviorFlag = 0
	BehaviorFlag_DISABLE_ACTION BehaviorFlag = 1
	BehaviorFlag_BREAK          BehaviorFlag = 2
	BehaviorFlag_BREAK_EXTEND   BehaviorFlag = 3
	// STATS_ are the behavior flags primarily used for DebuffRES
	BehaviorFlag_STAT_CTRL            BehaviorFlag = 100
	BehaviorFlag_STAT_CTRL_FROZEN     BehaviorFlag = 101
	BehaviorFlag_STAT_CTRL_STUN       BehaviorFlag = 102
	BehaviorFlag_STAT_DOT             BehaviorFlag = 103
	BehaviorFlag_STAT_DOT_POISON      BehaviorFlag = 104
	BehaviorFlag_STAT_DOT_ELECTRIC    BehaviorFlag = 105
	BehaviorFlag_STAT_DOT_BLEED       BehaviorFlag = 106
	BehaviorFlag_STAT_DOT_BURN        BehaviorFlag = 107
	BehaviorFlag_STAT_SPEED_DOWN      BehaviorFlag = 108
	BehaviorFlag_STAT_FATIGUE         BehaviorFlag = 110
	BehaviorFlag_STAT_DEF_DOWN        BehaviorFlag = 109
	BehaviorFlag_STAT_CONFINE         BehaviorFlag = 111
	BehaviorFlag_STAT_BURST           BehaviorFlag = 112
	BehaviorFlag_STAT_SPEED_UP        BehaviorFlag = 113
	BehaviorFlag_STAT_ATTACH_WEAKNESS BehaviorFlag = 114
	BehaviorFlag_STAT_ENTANGLE        BehaviorFlag = 115
)

// Enum value maps for BehaviorFlag.
var (
	BehaviorFlag_name = map[int32]string{
		0:   "INVALID_FLAG",
		1:   "DISABLE_ACTION",
		2:   "BREAK",
		3:   "BREAK_EXTEND",
		100: "STAT_CTRL",
		101: "STAT_CTRL_FROZEN",
		102: "STAT_CTRL_STUN",
		103: "STAT_DOT",
		104: "STAT_DOT_POISON",
		105: "STAT_DOT_ELECTRIC",
		106: "STAT_DOT_BLEED",
		107: "STAT_DOT_BURN",
		108: "STAT_SPEED_DOWN",
		110: "STAT_FATIGUE",
		109: "STAT_DEF_DOWN",
		111: "STAT_CONFINE",
		112: "STAT_BURST",
		113: "STAT_SPEED_UP",
		114: "STAT_ATTACH_WEAKNESS",
		115: "STAT_ENTANGLE",
	}
	BehaviorFlag_value = map[string]int32{
		"INVALID_FLAG":         0,
		"DISABLE_ACTION":       1,
		"BREAK":                2,
		"BREAK_EXTEND":         3,
		"STAT_CTRL":            100,
		"STAT_CTRL_FROZEN":     101,
		"STAT_CTRL_STUN":       102,
		"STAT_DOT":             103,
		"STAT_DOT_POISON":      104,
		"STAT_DOT_ELECTRIC":    105,
		"STAT_DOT_BLEED":       106,
		"STAT_DOT_BURN":        107,
		"STAT_SPEED_DOWN":      108,
		"STAT_FATIGUE":         110,
		"STAT_DEF_DOWN":        109,
		"STAT_CONFINE":         111,
		"STAT_BURST":           112,
		"STAT_SPEED_UP":        113,
		"STAT_ATTACH_WEAKNESS": 114,
		"STAT_ENTANGLE":        115,
	}
)

func (x BehaviorFlag) Enum() *BehaviorFlag {
	p := new(BehaviorFlag)
	*p = x
	return p
}

func (x BehaviorFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BehaviorFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_model_enum_proto_enumTypes[1].Descriptor()
}

func (BehaviorFlag) Type() protoreflect.EnumType {
	return &file_pb_model_enum_proto_enumTypes[1]
}

func (x BehaviorFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BehaviorFlag.Descriptor instead.
func (BehaviorFlag) EnumDescriptor() ([]byte, []int) {
	return file_pb_model_enum_proto_rawDescGZIP(), []int{1}
}

type StatusType int32

const (
	StatusType_UNKNOWN_STATUS StatusType = 0
	StatusType_STATUS_BUFF    StatusType = 1
	StatusType_STATUS_DEBUFF  StatusType = 2
)

// Enum value maps for StatusType.
var (
	StatusType_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "STATUS_BUFF",
		2: "STATUS_DEBUFF",
	}
	StatusType_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"STATUS_BUFF":    1,
		"STATUS_DEBUFF":  2,
	}
)

func (x StatusType) Enum() *StatusType {
	p := new(StatusType)
	*p = x
	return p
}

func (x StatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_model_enum_proto_enumTypes[2].Descriptor()
}

func (StatusType) Type() protoreflect.EnumType {
	return &file_pb_model_enum_proto_enumTypes[2]
}

func (x StatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusType.Descriptor instead.
func (StatusType) EnumDescriptor() ([]byte, []int) {
	return file_pb_model_enum_proto_rawDescGZIP(), []int{2}
}

type DispelOrder int32

const (
	DispelOrder_INVALID_DISPEL_ORDER DispelOrder = 0
	DispelOrder_LAST_ADDED           DispelOrder = 1
	DispelOrder_FIRST_ADDED          DispelOrder = 2
	DispelOrder_RANDOM               DispelOrder = 3
)

// Enum value maps for DispelOrder.
var (
	DispelOrder_name = map[int32]string{
		0: "INVALID_DISPEL_ORDER",
		1: "LAST_ADDED",
		2: "FIRST_ADDED",
		3: "RANDOM",
	}
	DispelOrder_value = map[string]int32{
		"INVALID_DISPEL_ORDER": 0,
		"LAST_ADDED":           1,
		"FIRST_ADDED":          2,
		"RANDOM":               3,
	}
)

func (x DispelOrder) Enum() *DispelOrder {
	p := new(DispelOrder)
	*p = x
	return p
}

func (x DispelOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DispelOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_model_enum_proto_enumTypes[3].Descriptor()
}

func (DispelOrder) Type() protoreflect.EnumType {
	return &file_pb_model_enum_proto_enumTypes[3]
}

func (x DispelOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DispelOrder.Descriptor instead.
func (DispelOrder) EnumDescriptor() ([]byte, []int) {
	return file_pb_model_enum_proto_rawDescGZIP(), []int{3}
}

type Path int32

const (
	Path_INVALID_PATH Path = 0
	Path_PRESERVATION Path = 1
	Path_HUNT         Path = 2
	Path_ERUDITION    Path = 3
	Path_NIHILITY     Path = 4
	Path_DESTRUCTION  Path = 5
	Path_HARMONY      Path = 6
	Path_ABUNDANCE    Path = 7
)

// Enum value maps for Path.
var (
	Path_name = map[int32]string{
		0: "INVALID_PATH",
		1: "PRESERVATION",
		2: "HUNT",
		3: "ERUDITION",
		4: "NIHILITY",
		5: "DESTRUCTION",
		6: "HARMONY",
		7: "ABUNDANCE",
	}
	Path_value = map[string]int32{
		"INVALID_PATH": 0,
		"PRESERVATION": 1,
		"HUNT":         2,
		"ERUDITION":    3,
		"NIHILITY":     4,
		"DESTRUCTION":  5,
		"HARMONY":      6,
		"ABUNDANCE":    7,
	}
)

func (x Path) Enum() *Path {
	p := new(Path)
	*p = x
	return p
}

func (x Path) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Path) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_model_enum_proto_enumTypes[4].Descriptor()
}

func (Path) Type() protoreflect.EnumType {
	return &file_pb_model_enum_proto_enumTypes[4]
}

func (x Path) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Path.Descriptor instead.
func (Path) EnumDescriptor() ([]byte, []int) {
	return file_pb_model_enum_proto_rawDescGZIP(), []int{4}
}

type DamageType int32

const (
	DamageType_INVALID_DAMAGE_TYPE DamageType = 0
	DamageType_PHYSICAL            DamageType = 1
	DamageType_FIRE                DamageType = 2
	DamageType_ICE                 DamageType = 3
	DamageType_THUNDER             DamageType = 4
	DamageType_WIND                DamageType = 5
	DamageType_QUANTUM             DamageType = 6
	DamageType_IMAGINARY           DamageType = 7
)

// Enum value maps for DamageType.
var (
	DamageType_name = map[int32]string{
		0: "INVALID_DAMAGE_TYPE",
		1: "PHYSICAL",
		2: "FIRE",
		3: "ICE",
		4: "THUNDER",
		5: "WIND",
		6: "QUANTUM",
		7: "IMAGINARY",
	}
	DamageType_value = map[string]int32{
		"INVALID_DAMAGE_TYPE": 0,
		"PHYSICAL":            1,
		"FIRE":                2,
		"ICE":                 3,
		"THUNDER":             4,
		"WIND":                5,
		"QUANTUM":             6,
		"IMAGINARY":           7,
	}
)

func (x DamageType) Enum() *DamageType {
	p := new(DamageType)
	*p = x
	return p
}

func (x DamageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DamageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_model_enum_proto_enumTypes[5].Descriptor()
}

func (DamageType) Type() protoreflect.EnumType {
	return &file_pb_model_enum_proto_enumTypes[5]
}

func (x DamageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DamageType.Descriptor instead.
func (DamageType) EnumDescriptor() ([]byte, []int) {
	return file_pb_model_enum_proto_rawDescGZIP(), []int{5}
}

type AttackType int32

const (
	AttackType_INVALID_ATTACK_TYPE AttackType = 0
	AttackType_NORMAL              AttackType = 1
	AttackType_SKILL               AttackType = 2
	AttackType_ULT                 AttackType = 3
	AttackType_DOT                 AttackType = 4
	AttackType_PURSUED             AttackType = 5
	AttackType_MAZE                AttackType = 6
	AttackType_MAZE_NORMAL         AttackType = 7
	AttackType_INSERT              AttackType = 8
	AttackType_ELEMENT_DAMAGE      AttackType = 9
)

// Enum value maps for AttackType.
var (
	AttackType_name = map[int32]string{
		0: "INVALID_ATTACK_TYPE",
		1: "NORMAL",
		2: "SKILL",
		3: "ULT",
		4: "DOT",
		5: "PURSUED",
		6: "MAZE",
		7: "MAZE_NORMAL",
		8: "INSERT",
		9: "ELEMENT_DAMAGE",
	}
	AttackType_value = map[string]int32{
		"INVALID_ATTACK_TYPE": 0,
		"NORMAL":              1,
		"SKILL":               2,
		"ULT":                 3,
		"DOT":                 4,
		"PURSUED":             5,
		"MAZE":                6,
		"MAZE_NORMAL":         7,
		"INSERT":              8,
		"ELEMENT_DAMAGE":      9,
	}
)

func (x AttackType) Enum() *AttackType {
	p := new(AttackType)
	*p = x
	return p
}

func (x AttackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttackType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_model_enum_proto_enumTypes[6].Descriptor()
}

func (AttackType) Type() protoreflect.EnumType {
	return &file_pb_model_enum_proto_enumTypes[6]
}

func (x AttackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttackType.Descriptor instead.
func (AttackType) EnumDescriptor() ([]byte, []int) {
	return file_pb_model_enum_proto_rawDescGZIP(), []int{6}
}

type DamageFormula int32

const (
	DamageFormula_INVALID_DAMAGE_FORMULA DamageFormula = 0
	DamageFormula_BY_ATK                 DamageFormula = 1
	DamageFormula_BY_DEF                 DamageFormula = 2
	DamageFormula_BY_MAX_HP              DamageFormula = 3
	DamageFormula_BY_BREAK_DAMAGE        DamageFormula = 4
)

// Enum value maps for DamageFormula.
var (
	DamageFormula_name = map[int32]string{
		0: "INVALID_DAMAGE_FORMULA",
		1: "BY_ATK",
		2: "BY_DEF",
		3: "BY_MAX_HP",
		4: "BY_BREAK_DAMAGE",
	}
	DamageFormula_value = map[string]int32{
		"INVALID_DAMAGE_FORMULA": 0,
		"BY_ATK":                 1,
		"BY_DEF":                 2,
		"BY_MAX_HP":              3,
		"BY_BREAK_DAMAGE":        4,
	}
)

func (x DamageFormula) Enum() *DamageFormula {
	p := new(DamageFormula)
	*p = x
	return p
}

func (x DamageFormula) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DamageFormula) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_model_enum_proto_enumTypes[7].Descriptor()
}

func (DamageFormula) Type() protoreflect.EnumType {
	return &file_pb_model_enum_proto_enumTypes[7]
}

func (x DamageFormula) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DamageFormula.Descriptor instead.
func (DamageFormula) EnumDescriptor() ([]byte, []int) {
	return file_pb_model_enum_proto_rawDescGZIP(), []int{7}
}

type HealFormula int32

const (
	HealFormula_INVALID_HEAL_FORMULA HealFormula = 0
	HealFormula_BY_HEALER_ATK        HealFormula = 1
	HealFormula_BY_HEALER_DEF        HealFormula = 2
	HealFormula_BY_HEALER_MAX_HP     HealFormula = 3
	HealFormula_BY_TARGET_MAX_HP     HealFormula = 4
	HealFormula_BY_TARGET_LOST_HP    HealFormula = 5
)

// Enum value maps for HealFormula.
var (
	HealFormula_name = map[int32]string{
		0: "INVALID_HEAL_FORMULA",
		1: "BY_HEALER_ATK",
		2: "BY_HEALER_DEF",
		3: "BY_HEALER_MAX_HP",
		4: "BY_TARGET_MAX_HP",
		5: "BY_TARGET_LOST_HP",
	}
	HealFormula_value = map[string]int32{
		"INVALID_HEAL_FORMULA": 0,
		"BY_HEALER_ATK":        1,
		"BY_HEALER_DEF":        2,
		"BY_HEALER_MAX_HP":     3,
		"BY_TARGET_MAX_HP":     4,
		"BY_TARGET_LOST_HP":    5,
	}
)

func (x HealFormula) Enum() *HealFormula {
	p := new(HealFormula)
	*p = x
	return p
}

func (x HealFormula) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealFormula) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_model_enum_proto_enumTypes[8].Descriptor()
}

func (HealFormula) Type() protoreflect.EnumType {
	return &file_pb_model_enum_proto_enumTypes[8]
}

func (x HealFormula) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealFormula.Descriptor instead.
func (HealFormula) EnumDescriptor() ([]byte, []int) {
	return file_pb_model_enum_proto_rawDescGZIP(), []int{8}
}

type ShieldFormula int32

const (
	ShieldFormula_INVALID_SHIELD_FORMULA          ShieldFormula = 0
	ShieldFormula_SHIELD_BY_SHIELDER_ATK          ShieldFormula = 1
	ShieldFormula_SHIELD_BY_SHIELDER_DEF          ShieldFormula = 2
	ShieldFormula_SHIELD_BY_SHIELDER_MAX_HP       ShieldFormula = 3
	ShieldFormula_SHIELD_BY_TARGET_MAX_HP         ShieldFormula = 4
	ShieldFormula_SHIELD_BY_SHIELDER_TOTAL_SHIELD ShieldFormula = 5
)

// Enum value maps for ShieldFormula.
var (
	ShieldFormula_name = map[int32]string{
		0: "INVALID_SHIELD_FORMULA",
		1: "SHIELD_BY_SHIELDER_ATK",
		2: "SHIELD_BY_SHIELDER_DEF",
		3: "SHIELD_BY_SHIELDER_MAX_HP",
		4: "SHIELD_BY_TARGET_MAX_HP",
		5: "SHIELD_BY_SHIELDER_TOTAL_SHIELD",
	}
	ShieldFormula_value = map[string]int32{
		"INVALID_SHIELD_FORMULA":          0,
		"SHIELD_BY_SHIELDER_ATK":          1,
		"SHIELD_BY_SHIELDER_DEF":          2,
		"SHIELD_BY_SHIELDER_MAX_HP":       3,
		"SHIELD_BY_TARGET_MAX_HP":         4,
		"SHIELD_BY_SHIELDER_TOTAL_SHIELD": 5,
	}
)

func (x ShieldFormula) Enum() *ShieldFormula {
	p := new(ShieldFormula)
	*p = x
	return p
}

func (x ShieldFormula) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShieldFormula) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_model_enum_proto_enumTypes[9].Descriptor()
}

func (ShieldFormula) Type() protoreflect.EnumType {
	return &file_pb_model_enum_proto_enumTypes[9]
}

func (x ShieldFormula) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShieldFormula.Descriptor instead.
func (ShieldFormula) EnumDescriptor() ([]byte, []int) {
	return file_pb_model_enum_proto_rawDescGZIP(), []int{9}
}

type ModifyHPRatioType int32

const (
	ModifyHPRatioType_INVALID_RATIO_TYPE ModifyHPRatioType = 0
	ModifyHPRatioType_MAX_HP             ModifyHPRatioType = 1
	ModifyHPRatioType_CURRENT_HP         ModifyHPRatioType = 2
)

// Enum value maps for ModifyHPRatioType.
var (
	ModifyHPRatioType_name = map[int32]string{
		0: "INVALID_RATIO_TYPE",
		1: "MAX_HP",
		2: "CURRENT_HP",
	}
	ModifyHPRatioType_value = map[string]int32{
		"INVALID_RATIO_TYPE": 0,
		"MAX_HP":             1,
		"CURRENT_HP":         2,
	}
)

func (x ModifyHPRatioType) Enum() *ModifyHPRatioType {
	p := new(ModifyHPRatioType)
	*p = x
	return p
}

func (x ModifyHPRatioType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModifyHPRatioType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_model_enum_proto_enumTypes[10].Descriptor()
}

func (ModifyHPRatioType) Type() protoreflect.EnumType {
	return &file_pb_model_enum_proto_enumTypes[10]
}

func (x ModifyHPRatioType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModifyHPRatioType.Descriptor instead.
func (ModifyHPRatioType) EnumDescriptor() ([]byte, []int) {
	return file_pb_model_enum_proto_rawDescGZIP(), []int{10}
}

type TargetType int32

const (
	TargetType_INVALID_TARGET_TYPE TargetType = 0
	TargetType_SELF                TargetType = 1
	TargetType_ALLIES              TargetType = 2
	TargetType_ENEMIES             TargetType = 3
)

// Enum value maps for TargetType.
var (
	TargetType_name = map[int32]string{
		0: "INVALID_TARGET_TYPE",
		1: "SELF",
		2: "ALLIES",
		3: "ENEMIES",
	}
	TargetType_value = map[string]int32{
		"INVALID_TARGET_TYPE": 0,
		"SELF":                1,
		"ALLIES":              2,
		"ENEMIES":             3,
	}
)

func (x TargetType) Enum() *TargetType {
	p := new(TargetType)
	*p = x
	return p
}

func (x TargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_model_enum_proto_enumTypes[11].Descriptor()
}

func (TargetType) Type() protoreflect.EnumType {
	return &file_pb_model_enum_proto_enumTypes[11]
}

func (x TargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetType.Descriptor instead.
func (TargetType) EnumDescriptor() ([]byte, []int) {
	return file_pb_model_enum_proto_rawDescGZIP(), []int{11}
}

type TerminationReason int32

const (
	TerminationReason_INVALID_TERMINATION TerminationReason = 0
	TerminationReason_BATTLE_LOSS         TerminationReason = 1
	TerminationReason_BATTLE_WIN          TerminationReason = 2
	TerminationReason_TIMEOUT             TerminationReason = 3
)

// Enum value maps for TerminationReason.
var (
	TerminationReason_name = map[int32]string{
		0: "INVALID_TERMINATION",
		1: "BATTLE_LOSS",
		2: "BATTLE_WIN",
		3: "TIMEOUT",
	}
	TerminationReason_value = map[string]int32{
		"INVALID_TERMINATION": 0,
		"BATTLE_LOSS":         1,
		"BATTLE_WIN":          2,
		"TIMEOUT":             3,
	}
)

func (x TerminationReason) Enum() *TerminationReason {
	p := new(TerminationReason)
	*p = x
	return p
}

func (x TerminationReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerminationReason) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_model_enum_proto_enumTypes[12].Descriptor()
}

func (TerminationReason) Type() protoreflect.EnumType {
	return &file_pb_model_enum_proto_enumTypes[12]
}

func (x TerminationReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerminationReason.Descriptor instead.
func (TerminationReason) EnumDescriptor() ([]byte, []int) {
	return file_pb_model_enum_proto_rawDescGZIP(), []int{12}
}

var File_pb_model_enum_proto protoreflect.FileDescriptor

var file_pb_model_enum_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x62, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2a, 0xb0, 0x0a, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48,
	0x50, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x50, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x50, 0x5f, 0x46,
	0x4c, 0x41, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x56,
	0x45, 0x52, 0x54, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x4b, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x4b, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45,
	0x4e, 0x54, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x4b, 0x5f, 0x46, 0x4c, 0x41, 0x54,
	0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52,
	0x54, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x46, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10,
	0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x46, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54,
	0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x46, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x10, 0x0b,
	0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x10,
	0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x50, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x0d, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x0e,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x50, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x10, 0x0f, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x50, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x10, 0x10, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x49, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x11,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x5f, 0x44, 0x4d, 0x47, 0x10, 0x12, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x10, 0x13,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x4e,
	0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x46,
	0x46, 0x45, 0x43, 0x54, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x15, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x17, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45,
	0x52, 0x54, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x45, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x4f,
	0x53, 0x54, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x45, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x4f,
	0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x10, 0x1a, 0x12, 0x0e, 0x0a, 0x0a,
	0x48, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x1b, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x1c, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x1d,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x47, 0x47, 0x52, 0x4f, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x1e,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x47, 0x47, 0x52, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e,
	0x54, 0x10, 0x1f, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x47, 0x47, 0x52, 0x4f, 0x5f, 0x46, 0x4c, 0x41,
	0x54, 0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x5f, 0x45, 0x46, 0x46,
	0x45, 0x43, 0x54, 0x10, 0x21, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x4d, 0x47,
	0x5f, 0x52, 0x45, 0x53, 0x10, 0x22, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x49, 0x52, 0x45, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x24, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x25, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x48, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0x26, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d, 0x5f,
	0x44, 0x4d, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x27, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x41,
	0x47, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x28,
	0x12, 0x10, 0x0a, 0x0c, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x52, 0x45, 0x53,
	0x10, 0x29, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50,
	0x45, 0x4e, 0x10, 0x2a, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x10, 0x2b, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x10, 0x2c, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x48, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x4e, 0x10, 0x2d,
	0x12, 0x0f, 0x0a, 0x0b, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d, 0x5f, 0x50, 0x45, 0x4e, 0x10,
	0x2e, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x50,
	0x45, 0x4e, 0x10, 0x2f, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x45, 0x4e,
	0x10, 0x30, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x54, 0x41,
	0x4b, 0x45, 0x4e, 0x10, 0x31, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x32, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10,
	0x33, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x54, 0x41, 0x4b,
	0x45, 0x4e, 0x10, 0x34, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x48, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x44, 0x4d, 0x47, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x35, 0x12, 0x15, 0x0a, 0x11, 0x51,
	0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e,
	0x10, 0x36, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f,
	0x44, 0x4d, 0x47, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x37, 0x12, 0x12, 0x0a, 0x0e, 0x57,
	0x49, 0x4e, 0x44, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x38, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45,
	0x4e, 0x54, 0x10, 0x39, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x4f, 0x54, 0x5f, 0x44, 0x4d, 0x47, 0x5f,
	0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x3a, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x52,
	0x45, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x3b, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45,
	0x4e, 0x54, 0x10, 0x3c, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x48, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f,
	0x44, 0x4d, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x3d, 0x12, 0x17, 0x0a,
	0x13, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x10, 0x3e, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e,
	0x41, 0x52, 0x59, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10,
	0x3f, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x50, 0x45,
	0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x40, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x48, 0x59, 0x53, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10,
	0x41, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x44, 0x4d, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x42, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x10,
	0x5a, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x54, 0x49, 0x47, 0x55, 0x45, 0x10, 0x5b, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x49, 0x4e, 0x5f, 0x46, 0x41, 0x54, 0x49, 0x47, 0x55, 0x45, 0x10, 0x5c, 0x2a,
	0x8d, 0x03, 0x0a, 0x0c, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x47,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x54, 0x52, 0x4c,
	0x10, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x54, 0x52, 0x4c, 0x5f,
	0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x43, 0x54, 0x52, 0x4c, 0x5f, 0x53, 0x54, 0x55, 0x4e, 0x10, 0x66, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x10, 0x67, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x53, 0x4f, 0x4e, 0x10, 0x68, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x52, 0x49, 0x43, 0x10, 0x69, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44,
	0x4f, 0x54, 0x5f, 0x42, 0x4c, 0x45, 0x45, 0x44, 0x10, 0x6a, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x5f, 0x42, 0x55, 0x52, 0x4e, 0x10, 0x6b, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x6c, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x46, 0x41, 0x54, 0x49, 0x47,
	0x55, 0x45, 0x10, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x46,
	0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x6d, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x6f, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x42, 0x55, 0x52, 0x53, 0x54, 0x10, 0x70, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x55, 0x50, 0x10, 0x71, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x5f, 0x57, 0x45, 0x41, 0x4b,
	0x4e, 0x45, 0x53, 0x53, 0x10, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45,
	0x4e, 0x54, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x73, 0x22, 0x04, 0x08, 0x04, 0x10, 0x63, 0x2a,
	0x44, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x55, 0x46, 0x46,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x42,
	0x55, 0x46, 0x46, 0x10, 0x02, 0x2a, 0x54, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x03, 0x2a, 0x7e, 0x0a, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x54, 0x48, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x55, 0x4e, 0x54, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x52, 0x55, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x49, 0x48, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x45, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x48, 0x41, 0x52, 0x4d, 0x4f, 0x4e, 0x59, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x42, 0x55, 0x4e, 0x44, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x07, 0x2a, 0x79, 0x0a, 0x0a, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x52, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x43,
	0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x48, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x04,
	0x12, 0x08, 0x0a, 0x04, 0x57, 0x49, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x55,
	0x41, 0x4e, 0x54, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4d, 0x41, 0x47, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x10, 0x07, 0x2a, 0x96, 0x01, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4b,
	0x49, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x44, 0x4f, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x55, 0x52, 0x53, 0x55,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x5a, 0x45, 0x10, 0x06, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x41, 0x5a, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x07, 0x12,
	0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x09, 0x2a,
	0x67, 0x0a, 0x0d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x41, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x42, 0x59, 0x5f, 0x41, 0x54, 0x4b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x59, 0x5f, 0x44,
	0x45, 0x46, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x59, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48,
	0x50, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x59, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x5f,
	0x44, 0x41, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x04, 0x2a, 0x90, 0x01, 0x0a, 0x0b, 0x48, 0x65, 0x61,
	0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f,
	0x41, 0x54, 0x4b, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x59, 0x5f, 0x48, 0x45, 0x41, 0x4c,
	0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x59, 0x5f, 0x48,
	0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x50, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x42, 0x59, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x48, 0x50, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x59, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
	0x54, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x05, 0x2a, 0xc4, 0x01, 0x0a, 0x0d,
	0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x1a, 0x0a,
	0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x48, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x45, 0x52, 0x5f,
	0x41, 0x54, 0x4b, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x42, 0x59, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x53,
	0x48, 0x49, 0x45, 0x4c, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x50, 0x10, 0x03,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x50, 0x10, 0x04, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44,
	0x10, 0x05, 0x2a, 0x47, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x50, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x50, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x50, 0x10, 0x02, 0x2a, 0x48, 0x0a, 0x0a, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x4c, 0x4c, 0x49, 0x45, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x45, 0x4d,
	0x49, 0x45, 0x53, 0x10, 0x03, 0x2a, 0x5a, 0x0a, 0x11, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4c, 0x4f,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x57,
	0x49, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x03, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x69, 0x6d, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x2f, 0x73, 0x72, 0x73, 0x69, 0x6d, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pb_model_enum_proto_rawDescOnce sync.Once
	file_pb_model_enum_proto_rawDescData = file_pb_model_enum_proto_rawDesc
)

func file_pb_model_enum_proto_rawDescGZIP() []byte {
	file_pb_model_enum_proto_rawDescOnce.Do(func() {
		file_pb_model_enum_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_model_enum_proto_rawDescData)
	})
	return file_pb_model_enum_proto_rawDescData
}

var file_pb_model_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_pb_model_enum_proto_goTypes = []any{
	(Property)(0),          // 0: model.Property
	(BehaviorFlag)(0),      // 1: model.BehaviorFlag
	(StatusType)(0),        // 2: model.StatusType
	(DispelOrder)(0),       // 3: model.DispelOrder
	(Path)(0),              // 4: model.Path
	(DamageType)(0),        // 5: model.DamageType
	(AttackType)(0),        // 6: model.AttackType
	(DamageFormula)(0),     // 7: model.DamageFormula
	(HealFormula)(0),       // 8: model.HealFormula
	(ShieldFormula)(0),     // 9: model.ShieldFormula
	(ModifyHPRatioType)(0), // 10: model.ModifyHPRatioType
	(TargetType)(0),        // 11: model.TargetType
	(TerminationReason)(0), // 12: model.TerminationReason
}
var file_pb_model_enum_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pb_model_enum_proto_init() }
func file_pb_model_enum_proto_init() {
	if File_pb_model_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_model_enum_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_model_enum_proto_goTypes,
		DependencyIndexes: file_pb_model_enum_proto_depIdxs,
		EnumInfos:         file_pb_model_enum_proto_enumTypes,
	}.Build()
	File_pb_model_enum_proto = out.File
	file_pb_model_enum_proto_rawDesc = nil
	file_pb_model_enum_proto_goTypes = nil
	file_pb_model_enum_proto_depIdxs = nil
}
