//go:build ignore

package main

import (
	"fmt"
	"log"
	"os"
	"text/template"

	"github.com/simimpact/srsim/gen"
)

type GroupLevel struct {
	HardLevelGroup    int           `json:"HardLevelGroup"`
	Level             int           `json:"Level"`
	AttackRatio       gen.ValueInfo `json:"AttackRatio"`
	DefenceRatio      gen.ValueInfo `json:"DefenceRatio"`
	HPRatio           gen.ValueInfo `json:"HPRatio"`
	SpeedRatio        gen.ValueInfo `json:"SpeedRatio"`
	StanceRatio       gen.ValueInfo `json:"StanceRatio"`
	StatusProbability gen.ValueInfo `json:"StatusProbability"`
	StatusResistance  gen.ValueInfo `json:"StatusResistance"`
}

type HardLevelGroup map[string]GroupLevel

func main() {
	if !gen.IsDMAvailable() {
		return
	}

	var levelGroups map[string]HardLevelGroup

	if err := gen.ReadDMFile(&levelGroups, "ExcelOutput", "HardLevelGroup.json"); err != nil {
		fmt.Println(err)
		return
	}

	results := make(map[string][]GroupLevel)
	for k, group := range levelGroups {
		results[k] = make([]GroupLevel, len(group)+1)
		for _, lvl := range group {
			results[k][lvl.Level] = lvl
		}
	}

	curveFile, err := os.Create("curve.gen.go")
	if err != nil {
		log.Fatal(err)
	}
	defer curveFile.Close()

	tmpl, err := template.New("outcurve").Parse(tmpLevelGroups)
	if err != nil {
		log.Fatal(err)
	}
	if err := tmpl.Execute(curveFile, results); err != nil {
		log.Fatal(err)
	}
}

var tmpLevelGroups = `// Code generated by "enemy"; DO NOT EDIT.

package enemy
{{ range $key, $value := . }}
var LevelCurve{{$key}} = []LevelData{
	{{- range $e := $value }}
	{
		ATKScaling:    {{$e.AttackRatio.Value}},
		DEFScaling:    {{$e.DefenceRatio.Value}},
		HPScaling:     {{$e.HPRatio.Value}},
		SPDScaling:    {{$e.SpeedRatio.Value}},
		StanceScaling: {{$e.StanceRatio.Value}},
		EffectHitRate: {{$e.StatusProbability.Value}},
		EffectRES:     {{$e.StatusResistance.Value}},
	},
	{{- end }}
}
{{ end }}
`
